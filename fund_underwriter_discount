import re
import spacy
import fitz  
import pdf_files

# Load the spaCy English model (use a larger model if needed)
nlp = spacy.load("en_core_web_sm")

def extract_underwriting_discount_from_pdf(pdf_path):
    """
    Process a PDF file page by page and extract a single underwriting discount value.
    
    The discount value may be expressed using either of the following sets of phrases:
    
      1. Underwriting discount phrases:
         - "underwriting discount of $1,444.00"
         - "Underwriting discount of $1,444.00"
         - "Underwriters’ discount of $1,630,010.14"
         - "Underwriter's discount of $1,630,010.14"
    
      2. Purchaser phrases (interpreted as the discount):
         - "Purchaser’s Expenses of $xxx.xx"
         - "Purchasers' Expenses of $xxx.xx"
         - "Purchaser’s Fees of $xxx.xx"
         - "Purchasers' Fees of $xxx.xx"
         - Or a combined phrase like: "Purchaser’s Fee and Purchaser’s Expenses of $758,951.40"
    
    The regex is applied to the entire text of each page (using re.DOTALL) to capture values even if they fall on a new line.
    
    Returns:
      A string with the discount value (e.g., "$1,444.00"), or None if no match is found.
    """
    # Pattern for underwriting discount phrases.
    discount_pattern = re.compile(
        r"(?:underwriting|underwriters[’']?)\s+discount\s+of\s+(\$\d{1,3}(?:,\d{3})*(?:\.\d{2}))",
        re.IGNORECASE | re.DOTALL
    )
    
    # Updated pattern for purchaser phrases.
    # This pattern allows for variations such as:
    # "Purchaser’s Fee", "Purchasers' Expenses", and even a combined phrase like
    # "Purchaser’s Fee and Purchaser’s Expenses of $758,951.40"
    #
    # The purchaser name part is defined as:
    #    purchaser(?:s|[’']s|s[’']?)?
    # which will match any of these variations.
    purchaser_pattern = re.compile(
        r"purchaser(?:s|[’']s|s[’']?)?\s+"
        r"(?:fee|fees|expenses)"
        r"(?:\s+and\s+purchaser(?:s|[’']s|s[’']?)?\s+(?:fee|fees|expenses))?"
        r"\s+of\s+(\$\d{1,3}(?:,\d{3})*(?:\.\d{2}))",
        re.IGNORECASE | re.DOTALL
    )
    
    with fitz.open(pdf_path) as doc:
        for page in doc:
            text = page.get_text()  # Retains newlines
            # First try the underwriting discount phrase:
            match_discount = discount_pattern.search(text)
            if match_discount:
                return match_discount.group(1)
            # If not found, try the purchaser phrase:
            match_purchaser = purchaser_pattern.search(text)
            if match_purchaser:
                return match_purchaser.group(1)
    return None
                    





test1 = extract_underwriting_discount_from_pdf(pdf_files.pdf_files[0]['path'])
print(pdf_files.pdf_files[0]['name'], test1)

test2 = extract_underwriting_discount_from_pdf(pdf_files.pdf_files[1]['path'])
print(pdf_files.pdf_files[1]['name'], test2)

test3 = extract_underwriting_discount_from_pdf(pdf_files.pdf_files[2]['path'])
print(pdf_files.pdf_files[2]['name'], test3)

test4 = extract_underwriting_discount_from_pdf(pdf_files.pdf_files[3]['path'])
print(pdf_files.pdf_files[3]['name'], test4)
